TM -- process 进程
Task on slot -- thread 线程

每个线程执行在固定的计算资源上，这个资源就是slot；
slot之间内存是独享的，CPU不是独享的
所以slot数量最好配成 CPU 核心数

并行的概念：
数据并行 —— 同一个任务，不同的并行子任务，同时处理不同的数据
任务并行 —— 同一时间，不同的slot在执行不同的任务

允许slot共享，可以提高资源的利用率

一个流处理程序需要的slot数量，其实就是所有任务中最大的那个并行度

如果并行度相同、one-to-one数据传输，那么可以把多个算子合并成一个任务


TM的数量和slot数量，决定了并行处理的最大能力（静态）
但是不一定程序执行时一定都用到。程序执行时的并行度才是用到的能力（动态）。

------------------------------------------------------
核心问题：

1. 任务是什么？一段代码到底会生成多少任务？
代码中定义的每一步操作（算子，operator）就是一个任务
算子可以设置并行度，所以每一步操作可以有多个并行的子任务
Flink可以将前后执行的不同的任务合并起来

2. slot到底是什么，slot跟任务的关系？一段代码到底需要多少个slot来执行？
slot是TM拥有的计算资源的一个子集，一个任务必须在一个slot上执行
每一个算子的并行任务，必需执行在不同的slot上
如果是不同算子的任务，可以共享一个slot
一般情况下，一段代码执行需要的slot数量，就是并行度最大的算子的并行度

3. 并行度和slot数量的关系？
并行度和任务有关，就是每一个算子拥有的并行任务数量；动态概念
slot数量只跟TM的配置有关，代表TM并行处理数据的能力，静态概念

4. 什么样的任务能够合并在一起？
one-to-one操作，并行度相同